
The philostone coding style

Coding is undoubtedly a thoroughly personal matter. Everyone is free to have personal preferences,
anything else would, in my considered view, be a violation of personal integrity. However, for
software in this repository, my repository, my style is law, although it is a law that may be
altered, if I would happen to stumble upon a reason to change my mind.

Inspirations, sometimes followed and sometimes opposed, are:
(A) https://www.kernel.org/doc/Documentation/process/coding-style.rst (the baseline)
(B) https://man.openbsd.org/style  (reviewed as a second opinion)
(C) https://suckless.org/coding_style (considered, in essence, ideologically sound, but not all) 

For now, the following is my preferences, i.e., the current philostone coding law:

File Layout
each header-and-code file-pair should compile separately (e.g. gcc -Wall -c a.c, that presumably
is including a file named a.h) without errors, and as such it should include:
* a leading informative (c-style) comment about file content and relations to other files
* necessesary (and only necessary) header includes
* macro definitions (local, otherwise they should be placed in corresponding header)
* type declarations (local, otherwise as above)
* necessary forward function declarations
	(avoid if possible -> if req. perhaps you should split into more translation units)
	placed in the same order as definitions below
* global variabe definitions (avoid if possible)
* function definitions (in the order that minimizes the req. for forward declarations),
  my view is that this approach is beneficial for overall program logic (i.e. what should/can
  be nested within a function and what should be a function of its own...)
* main (if present), kept as small as possible,
  aim for main is for it to clearly display overall program functionality (structure)

* avoid line length above 100 characters (rationale: the commonly stated requirement of <80
  is, in my opinion, for crt (old, not used anymore) displays, but >100 becomes unreadable,
  see also the reasoning about indentation and leading whitespace below)

Headers
* first, system headers, in alphabetical order
* after an empty line, local headers, in relevance/logical order, because ...
* try to avoid cyclic header inclusions -> structure headers and files such that it is possible
  to include merely the explicitly necessary ones (and declare the rest static)

C Features
* comments: I actually like cpp-style (contrary to e.g. ref. C), i.e. //, for short comments,
  especially for end-of-line explanations or own line code section "headers" within functions
  (altough these should be kept to a minimum), but I prefer /* */ for longer explanations, e.g.
  ahead of function declarations etc.

Blocks
* I'm fairly pragmatic about declaration positions. However, strive to to place them att top of
  a block, but if straightforward, please go ahead and place them at need, e.g.:
	...
	va_list ap;
	va_start(ap, first_var);
	int int_arg = va_arg(ap, int);
	...
* { on the same line, preceeded by a single space (except for functions, of course! (ref. A))
* } on own line, unless a continuing statement (if {} else [if] {}, do {} while (), ...)
* use block for inner statement if it needs a block, e.g.:
	for (;;) {
		if (foo) {
			aaa;
			bbb;
		}
	}
* use block if another branch of the same statement needs a block, e.g.:
	if (foo) {
		aaa;
	} else {
		bbb;
		ccc;
	}

Indentation - Leading whitespace[s]
* ALWAYS use tabs (8 characters wide) for indentation and (optionally) spaces for alignment.
  This is, I know, a touchy subject. But I -sincerely- reproach the use of spaces for indentation,
  for several reasons I do not have to specify, as this is, as stated before, -my- preferences.
  However, I will provide one reason I believe is sufficient (besides all good reasons given in
  (ref. A) above), and that is for whenever you want to quickly edit some code with a simple text
  editor, such as, for instance, nano, spaces as indentation are simply a living hell (and I
  concur with Linus Torvalds' statement in the linux kernel coding style document, that "if you
  need more than 3 levels of indentation, your're screwed anyway, and should fix your program",
  although I'm stretching it to 4 levels and a width-limit of 100 characters - as stated in
  File Layout above).
* Although I understand the rationale behind stating that indentations in multiline macro
  definitions should be made with spaces (e.g., ref. C), I consider that argument motivated
  by human readability -after- preprocessing (i.e. macro substitution), but my focus is more on
  human usability/readability -while editing- the code. My preference is therefore to use tabs
  also in multiline macro definitions.

Keywords, operators and spaces
* It should be a space after a keyword as they are nor function calls, e.g. if (...
* But there should be no spaces within the (), e.g. if (a == B) {
* Use spaces around binary operators, e.g. a += b; but not around unary operators,
  e.g. if (!a) {, a++;, ++a; sizeof(struct);, etc.
* No space around member operators, e.g. a.b = c->d;
* No trailing whitespace, make sure to clean those away, inculding those on empty lines where
  unused leading whitespace sometimes are left lurking around

Functions
* Return type and modifiers on own line
* Function name and argument list on next line. Frankly, I used to think this was awkward and
  preferred having all on the same line, but now I have come to appreciate the ref. C argument
  about the possibility to use grep ^functionname( that follows from using this style.

Pointers
* The * -should- be placed adjacent to the variable name (which is what to be identified as
  a pointer), e.g. char *str; -not- next to the type of data to which the pointer is pointing

Scope
* Functions and variables not used outside a translation unit should be declared static, this
  scope-restriction policy is simply to help avoid a plethora of confusions/errors possible
  without it

Switch
* Do not indent cases
* and comment fallthroughs, e.g.:
	switch (num) {
	case 0:
		aaa;
		break;
	case 1: /* fallthrough [perhaps also a short indication of why?] */
	case 2:
		bbb;
		break;
	default: /* no need for a "fallthrough comment2 if placed as the last case */
		ccc;
	}

Naming
* Use lower case letters in function and variable names, do not use mixed-case phrasing,
  i.e. count_numbers() -NOT- CountNumbers
* Use upper case only names for constants and macros
* Global names, like functions, should be descriptive
* Function arguments should be descriptive but still as short as possible, and they should
  be included in function prototypes (for readability)
* Block internal variables should be -very- short, e.g. for (i = 0 ...

